import { useUser, SignInButton, SignOutButton } from "@clerk/nextjs";
import { Sign } from "crypto";
import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { postsRouter } from "~/server/api/routers/posts";
import { RouterOutputs, api } from "~/utils/api";

import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import Image from "next/image";
import { LoadingSpinner, LoadingPage } from "~/components/LoadingSpinner";

dayjs.extend(relativeTime);

const CreatePostWizard = () => {
  const { user } = useUser();

  if (!user) return null;

  return (
    <div className="flex w-full gap-3">
      <Image
        width={56}
        height={56}
        src={user.profileImageUrl}
        alt={"Profile Picture"}
        className="h-14 w-14 rounded-full"
        priority={true}
      />
      <input
        placeholder="Type some emojis..."
        className="px- grow bg-transparent outline-none"
      />
    </div>
  );
};

type PostWithUser = RouterOutputs["posts"]["getAll"][number];

const PostView = (props: PostWithUser) => {
  const { post, author } = props;

  return (
    <div
      key={post.id}
      className="flex items-center gap-3 border-b border-slate-400 p-4"
    >
      <Image
        width={56}
        height={56}
        src={author.profileImageUrl}
        alt={"Profile Picture"}
        className="h-14 w-14 rounded-full"
        priority={true}
      />
      <div className="flex flex-col">
        <div className="flex gap-2">
          <span>{`@${author.username}`}</span>
          <span>{dayjs(post.createdAt).fromNow()}</span>
        </div>

        <span>{post.content}</span>
      </div>
    </div>
  );
};

const Feed = () => {
  const { data, isLoading } = api.posts.getAll.useQuery();

  if (isLoading) return <LoadingPage />;

  if (!data) return <div>Something went wrong</div>;

  return (
    <div className="flex flex-col">
      {data?.map(({ post, author }) => (
        <div key={post.id}>
          <PostView post={post} author={author} />
        </div>
      ))}
    </div>
  );
};

const Home: NextPage = () => {
  // Fetch asap

  const { user, isLoaded: userLoaded, isSignedIn } = useUser();

  api.posts.getAll.useQuery();

  if (!userLoaded) return <LoadingPage />;

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div className="w-full border-x border-slate-400 md:max-w-2xl">
          <div className=" border-b border-slate-400 p-4">
            {!user && (
              <div className="flex justify-center">
                <SignInButton />
              </div>
            )}
            {user && <CreatePostWizard />}
          </div>
          <Feed />
        </div>
      </main>
    </>
  );
};

export default Home;
